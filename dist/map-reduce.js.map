{"version":3,"sources":["map-reduce.js"],"names":["addMapReduce","mapReduce","chain","Gun","opts","cb","putCb","opt","bucket","options","fields","allFields","Object","assign","doMapReduce","defaultLogger","fun","logging","args","log","newField","newValue","value","transform","filter","filters","ignoreFields","iterator","validField","processWhile","updateWhen","updateBucket","filterBucket","saveChanges","done","logger","context","ctx","oldProps","newProps","filteredFields","visited","updated","processedFields","field","val","defaultProcessWhile","reVisit","decision","defaultValidField","valid","length","indexOf","invalid","defaultUpdateWhen","processedAll","visitedAll","every","f","defaultSaveChanges","changesObj","put","defaultFilterBucket","deleteKeys","keys","deleteObj","reduce","obj","key","defaultUpdateBucket","props","defaultDone","Error","ensureFun","v","newFieldFun","newValueFun","oldValueFun","map","newKey","newObj","oldValue","doFilter","filtered","doReduce","doUpdate"],"mappings":"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","file":"map-reduce.js","sourcesContent":["export function addMapReduce(chain, Gun) {\n  chain.mapReduce = function (opts, cb, putCb, opt) {\n    mapReduce(this, opts, cb, putCb, opt)\n  }\n  return chain\n}\n\nexport function mapReduce(bucket, options = {}, cb, putCb, opt) {\n  bucket.fields((allFields) => {\n    options = Object.assign(options, {\n      allFields\n    })\n    doMapReduce(bucket, options, cb, putCb, opt)\n  })\n}\n\nfunction defaultLogger(fun, logging) {\n  return function (...args) {\n    if (logging)\n      console.log(fun, ...args)\n  }\n}\n\nfunction doMapReduce(bucket, {\n  newField,\n  newValue,\n  value,\n  transform,\n  filter,\n  filters,\n  fields = [],\n  ignoreFields = [],\n  allFields,\n  iterator = 'val',\n  validField,\n  processWhile,\n  updateWhen,\n  updateBucket,\n  filterBucket,\n  saveChanges,\n  done,\n  logging = false,\n  logger,\n  context\n}, cb, putCb, opt) {\n\n  let ctx = {\n    oldProps: {},\n    newProps: {},\n    filteredFields: {},\n    visited: {},\n    updated: false,\n    processedFields: 0,\n    allFields,\n    fields,\n    ignoreFields,\n    iterator,\n    context,\n    putCb,\n    opt\n  }\n\n  transform = transform || function (field, val) {\n    return {}\n  }\n\n  logger = logger || defaultLogger\n\n  const log = logger(iterator, logging)\n\n  log('ctx', ctx)\n\n  function defaultProcessWhile({\n    field,\n    val,\n    ctx\n  }) {\n    let reVisit = ctx.visited[field]\n    let decision = !reVisit\n    log('processWhile', reVisit, decision)\n    return decision\n  }\n\n  function defaultValidField(field, ctx) {\n    let {\n      fields,\n      ignoreFields\n    } = ctx\n    let valid = fields.length === 0 || fields.length > 0 && fields.indexOf(field) >= 0\n    let invalid = ignoreFields.length > 0 && ignoreFields.indexOf(field) >= 0\n    return valid && !invalid\n  }\n\n  function defaultUpdateWhen({\n    field,\n    val,\n    ctx\n  }) {\n    let processedAll = (ctx.processedFields >= ctx.allFields.length)\n    let visitedAll = ctx.allFields.every(f => ctx.visited[f])\n    let decision = visitedAll && processedAll\n    log('updateWhen', visitedAll, processedAll, decision)\n    return decision\n  }\n\n  function defaultSaveChanges(bucket, changesObj, ctx) {\n    bucket.put(changesObj, ctx.putCb, ctx.opt)\n  }\n\n  function defaultFilterBucket(bucket, ctx) {\n    let deleteKeys = Object.keys(ctx.filteredFields)\n    if (deleteKeys.length > 0) {\n      log('FILTER', deleteKeys)\n      let deleteObj = deleteKeys.reduce((obj, key) => {\n        obj[key] = null\n        return obj\n      }, {})\n      log('deleteObj', deleteObj)\n      ctx.saveChanges(bucket, deleteObj, ctx)\n    }\n  }\n\n  function defaultUpdateBucket(bucket, ctx) {\n    log('UPDATE', props)\n    let props = Object.assign(ctx.oldProps, ctx.newProps)\n    ctx.saveChanges(bucket, props, ctx)\n  }\n\n  function defaultDone(bucket, cb, ctx) {\n    log('DONE')\n    if (cb) {\n      cb(bucket, ctx)\n    } else {\n      throw Error(`${ctx.iterator}: missing callback (in done)`)\n    }\n  }\n\n  validField = validField || defaultValidField\n  processWhile = processWhile || defaultProcessWhile\n  updateWhen = updateWhen || defaultUpdateWhen\n  updateBucket = updateBucket || defaultUpdateBucket\n  filterBucket = filterBucket || defaultFilterBucket\n  saveChanges = saveChanges || defaultSaveChanges\n  done = done || defaultDone\n\n  ctx.saveChanges = saveChanges\n\n  function ensureFun(fun) {\n    if (fun && typeof fun !== 'function') {\n      return (v) => fun\n    } else {\n      return fun\n    }\n  }\n\n  let newFieldFun = ensureFun(newField)\n  let newValueFun = ensureFun(newValue)\n  let oldValueFun = ensureFun(value)\n\n  log(allFields)\n\n  // processWhile = processWhile.bind(this)\n  // updateWhen = updateWhen.bind(this)\n\n  bucket.map()[iterator](function (val, field) {\n    log('iterate', {\n      field,\n      val\n    })\n    if (!validField(field, ctx)) return\n\n    let newKey = newFieldFun ? newFieldFun(field, val, ctx) : field\n    let newValue = newValueFun ? newValueFun(val, field, ctx) : val\n    let newObj = transform(field, val, ctx)\n\n    let oldValue = oldValueFun ? oldValueFun(val, field, ctx) : val\n    let doFilter = false\n\n    if (filters) {\n      log('process filters', filters.length)\n      doFilter = filters.reduce((filtered, filter) => {\n        return !filtered ? filter(field, val, ctx) : filtered\n      }, false)\n    }\n\n    if (filter && filter(field, val)) {\n      doFilter = true\n    }\n\n    log({\n      newKey,\n      newValue,\n      oldValue,\n      doFilter\n    })\n\n    let doReduce = processWhile({\n      field,\n      val,\n      ctx\n    })\n    log('doReduce', doReduce)\n\n    if (doReduce) {\n      log('reduce', {\n        field,\n        val,\n        processedFields: ctx.processedFields\n      })\n      if (doFilter) {\n        ctx.filteredFields[field] = true\n      } else {\n        ctx.newProps = Object.assign(ctx.newProps, newObj)\n        ctx.newProps[newKey] = newValue\n\n        ctx.oldProps[field] = oldValue\n      }\n      ctx.visited[field] = true\n      ctx.visited[newKey] = true\n      ctx.processedFields++\n    }\n    let doUpdate = updateWhen({\n      field,\n      val,\n      ctx\n    })\n    log('doUpdate', doUpdate, ctx.processedFields)\n    if (doUpdate) {\n      if (!ctx.updated) {\n        log('UPDATE BUCKET')\n        ctx.updated = true\n        updateBucket(bucket, ctx)\n        filterBucket(bucket, ctx)\n        done(bucket, cb, ctx)\n      } else {\n        log('ignore update')\n      }\n    }\n  })\n}"]}