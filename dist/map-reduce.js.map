{"version":3,"sources":["map-reduce.js"],"names":["mapReduce","chain","opts","cb","bucket","options","putCb","opt","fields","allFields","console","log","Object","assign","doMapReduce","logger","fun","logging","_log","args","newField","newValue","value","filter","filters","iterator","processWhile","updateWhen","ctx","oldProps","newProps","deleteFields","visited","updated","processedFields","defaultProcessWhile","field","val","reVisit","decision","defaultUpdateWhen","processedAll","length","visitedAll","every","f","ensureFun","v","newFieldFun","newValueFun","oldValueFun","updateBucket","put","deleteKeys","keys","dkey","get","Error","map","newKey","oldValue","delField","reduce","filtered","delete","doReduce","doUpdate"],"mappings":"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","file":"map-reduce.js","sourcesContent":["import './live'\nimport './value'\nimport './async'\nimport './fields'\n\nimport Gun from 'gun/gun'\n\nGun.chain.mapReduce = function (opts, cb) {\n  mapReduce(this, opts, cb)\n}\n\nexport function mapReduce(bucket, options = {}, cb, putCb, opt) {\n\n  bucket.fields((allFields) => {\n    console.log('allFields', allFields)\n    options = Object.assign(options, {\n      allFields\n    })\n    doMapReduce(bucket, options, cb, putCb, opt)\n  })\n}\n\nfunction logger(fun, logging) {\n  return function _log(...args) {\n    if (logging)\n      console.log(fun, ...args)\n  }\n}\n\nfunction doMapReduce(bucket, {\n  newField,\n  newValue,\n  value,\n  filter,\n  filters,\n  allFields,\n  iterator = 'val',\n  processWhile,\n  updateWhen,\n  logging = false\n}, cb, putCb, opt) {\n\n  let ctx = {\n    oldProps: {},\n    newProps: {},\n    deleteFields: {},\n    visited: {},\n    updated: false,\n    processedFields: 0,\n    allFields\n  }\n\n  const log = logger(iterator, logging)\n\n  log('ctx', ctx)\n\n  function defaultProcessWhile({\n    field,\n    val,\n    ctx\n  }) {\n    let reVisit = ctx.visited[field]\n    let decision = !reVisit\n    log('processWhile', reVisit, decision)\n    return decision\n  }\n\n  function defaultUpdateWhen({\n    field,\n    val,\n    ctx\n  }) {\n    let processedAll = (ctx.processedFields >= ctx.allFields.length)\n    let visitedAll = ctx.allFields.every(f => ctx.visited[f])\n    let decision = visitedAll && processedAll\n    log('updateWhen', visitedAll, processedAll, decision)\n    return decision\n  }\n\n  processWhile = processWhile || defaultProcessWhile\n  updateWhen = updateWhen || defaultUpdateWhen\n\n  function ensureFun(fun) {\n    if (fun && typeof fun !== 'function') {\n      return (v) => fun\n    } else {\n      return fun\n    }\n  }\n\n  let newFieldFun = ensureFun(newField)\n  let newValueFun = ensureFun(newValue)\n  let oldValueFun = ensureFun(value)\n\n  function updateBucket(ctx) {\n    log('put', ctx.oldProps)\n    bucket.put(ctx.oldProps, putCb, opt)\n    log('put', ctx.newProps)\n    bucket.put(ctx.newProps, putCb, opt)\n\n    let deleteKeys = Object.keys(ctx.deleteFields)\n    if (deleteKeys.length > 0) {\n      log('DELETE', deleteKeys)\n      for (let dkey of deleteKeys) {\n        bucket.get(dkey).put(null, putCb, opt)\n      }\n    }\n\n    if (cb) {\n      cb(bucket)\n      log('DONE')\n    } else {\n      throw Error('Missing callback', cb)\n    }\n  }\n\n  log(allFields)\n\n  // processWhile = processWhile.bind(this)\n  // updateWhen = updateWhen.bind(this)\n\n  bucket.map()[iterator](function (val, field) {\n    log('iterate', {\n      field,\n      val\n    })\n    let newKey = newFieldFun ? newFieldFun(field, val) : field\n    let newValue = newValueFun ? newValueFun(val, field) : val\n    let oldValue = oldValueFun ? oldValueFun(val, field) : val\n    let delField = false\n\n    if (filters) {\n      log('process filters', filters.length)\n      delField = filters.reduce((filtered, filter) => {\n        return !filtered ? filter(field, val) : filtered\n      }, false)\n    }\n\n    if (filter && filter(field, val)) {\n      delField = true\n    }\n\n    log({\n      newKey,\n      newValue,\n      oldValue,\n      delete: delField\n    })\n\n    let doReduce = processWhile({\n      field,\n      val,\n      ctx\n    })\n    log('doReduce', doReduce)\n\n    if (doReduce) {\n      log('reduce', {\n        field,\n        val,\n        processedFields: ctx.processedFields\n      })\n      if (delField) {\n        ctx.deleteFields[field] = true\n      } else {\n        ctx.oldProps[field] = oldValue\n        ctx.newProps[newKey] = newValue\n      }\n      ctx.visited[field] = true\n      ctx.visited[newKey] = true\n      ctx.processedFields++\n    }\n    let doUpdate = updateWhen({\n      field,\n      val,\n      ctx\n    })\n    log('doUpdate', doUpdate, ctx.processedFields)\n    if (doUpdate) {\n      // on stopCondition\n      if (!ctx.updated) {\n        log('UPDATE BUCKET')\n        ctx.updated = true\n        updateBucket(ctx)\n      } else {\n        log('ignore update')\n      }\n    }\n  })\n}"]}