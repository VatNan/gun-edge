{"version":3,"sources":["map-reduce.js"],"names":["mapReduce","chain","opts","cb","bucket","options","putCb","opt","fields","allFields","console","log","Object","assign","doMapReduce","logger","fun","logging","_log","args","newField","newValue","value","filter","filters","iterator","processWhile","updateWhen","updateBucket","deleteFromBucket","done","ctx","oldProps","newProps","deleteFields","visited","updated","processedFields","defaultProcessWhile","field","val","reVisit","decision","defaultUpdateWhen","processedAll","length","visitedAll","every","f","defaultDeleteFromBucket","deleteKeys","keys","dkey","get","put","defaultUpdateBucket","defaultDone","Error","ensureFun","v","newFieldFun","newValueFun","oldValueFun","map","newKey","oldValue","delField","reduce","filtered","delete","doReduce","doUpdate"],"mappings":"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","file":"map-reduce.js","sourcesContent":["import './live'\nimport './value'\nimport './async'\nimport './fields'\n\nimport Gun from 'gun/gun'\n\nGun.chain.mapReduce = function (opts, cb) {\n  mapReduce(this, opts, cb)\n}\n\nexport function mapReduce(bucket, options = {}, cb, putCb, opt) {\n\n  bucket.fields((allFields) => {\n    console.log('allFields', allFields)\n    options = Object.assign(options, {\n      allFields\n    })\n    doMapReduce(bucket, options, cb, putCb, opt)\n  })\n}\n\nfunction logger(fun, logging) {\n  return function _log(...args) {\n    if (logging)\n      console.log(fun, ...args)\n  }\n}\n\nfunction doMapReduce(bucket, {\n  newField,\n  newValue,\n  value,\n  filter,\n  filters,\n  allFields,\n  iterator = 'val',\n  processWhile,\n  updateWhen,\n  updateBucket,\n  deleteFromBucket,\n  done,\n  logging = false\n}, cb, putCb, opt) {\n\n  let ctx = {\n    oldProps: {},\n    newProps: {},\n    deleteFields: {},\n    visited: {},\n    updated: false,\n    processedFields: 0,\n    allFields\n  }\n\n  const log = logger(iterator, logging)\n\n  log('ctx', ctx)\n\n  function defaultProcessWhile({\n    field,\n    val,\n    ctx\n  }) {\n    let reVisit = ctx.visited[field]\n    let decision = !reVisit\n    log('processWhile', reVisit, decision)\n    return decision\n  }\n\n  function defaultUpdateWhen({\n    field,\n    val,\n    ctx\n  }) {\n    let processedAll = (ctx.processedFields >= ctx.allFields.length)\n    let visitedAll = ctx.allFields.every(f => ctx.visited[f])\n    let decision = visitedAll && processedAll\n    log('updateWhen', visitedAll, processedAll, decision)\n    return decision\n  }\n\n  function defaultDeleteFromBucket(bucket, ctx) {\n    let deleteKeys = Object.keys(ctx.deleteFields)\n    if (deleteKeys.length > 0) {\n      log('DELETE', deleteKeys)\n      for (let dkey of deleteKeys) {\n        bucket.get(dkey).put(null, putCb, opt)\n      }\n    }\n  }\n\n  function defaultUpdateBucket(bucket, ctx) {\n    log('put', ctx.oldProps)\n    bucket.put(ctx.oldProps, putCb, opt)\n    log('put', ctx.newProps)\n    bucket.put(ctx.newProps, putCb, opt)\n  }\n\n  function defaultDone(bucket, cb) {\n    log('DONE')\n    if (cb) {\n      cb(bucket)\n    } else {\n      throw Error('Missing callback', cb)\n    }\n  }\n\n  processWhile = processWhile || defaultProcessWhile\n  updateWhen = updateWhen || defaultUpdateWhen\n  updateBucket = updateBucket || defaultUpdateBucket\n  deleteFromBucket = deleteFromBucket || defaultDeleteFromBucket\n  done = done || defaultDone\n\n  function ensureFun(fun) {\n    if (fun && typeof fun !== 'function') {\n      return (v) => fun\n    } else {\n      return fun\n    }\n  }\n\n  let newFieldFun = ensureFun(newField)\n  let newValueFun = ensureFun(newValue)\n  let oldValueFun = ensureFun(value)\n\n  log(allFields)\n\n  // processWhile = processWhile.bind(this)\n  // updateWhen = updateWhen.bind(this)\n\n  bucket.map()[iterator](function (val, field) {\n    log('iterate', {\n      field,\n      val\n    })\n    let newKey = newFieldFun ? newFieldFun(field, val) : field\n    let newValue = newValueFun ? newValueFun(val, field) : val\n    let oldValue = oldValueFun ? oldValueFun(val, field) : val\n    let delField = false\n\n    if (filters) {\n      log('process filters', filters.length)\n      delField = filters.reduce((filtered, filter) => {\n        return !filtered ? filter(field, val) : filtered\n      }, false)\n    }\n\n    if (filter && filter(field, val)) {\n      delField = true\n    }\n\n    log({\n      newKey,\n      newValue,\n      oldValue,\n      delete: delField\n    })\n\n    let doReduce = processWhile({\n      field,\n      val,\n      ctx\n    })\n    log('doReduce', doReduce)\n\n    if (doReduce) {\n      log('reduce', {\n        field,\n        val,\n        processedFields: ctx.processedFields\n      })\n      if (delField) {\n        ctx.deleteFields[field] = true\n      } else {\n        ctx.oldProps[field] = oldValue\n        ctx.newProps[newKey] = newValue\n      }\n      ctx.visited[field] = true\n      ctx.visited[newKey] = true\n      ctx.processedFields++\n    }\n    let doUpdate = updateWhen({\n      field,\n      val,\n      ctx\n    })\n    log('doUpdate', doUpdate, ctx.processedFields)\n    if (doUpdate) {\n      // on stopCondition\n      if (!ctx.updated) {\n        log('UPDATE BUCKET')\n        ctx.updated = true\n        updateBucket(bucket, ctx)\n        deleteFromBucket(bucket, ctx)\n        done(bucket, cb)\n      } else {\n        log('ignore update')\n      }\n    }\n  })\n}"]}