{"version":3,"sources":["map-reduce.js"],"names":["mapReduce","chain","opts","cb","bucket","putCb","opt","newField","newValue","value","filter","filters","iterator","processWhile","updateWhen","logging","oldProps","newProps","deleteFields","visited","updated","allFields","fields","processedFields","defaultProcessWhile","field","val","reVisit","decision","log","defaultUpdateWhen","processedAll","length","visitedAll","every","f","logger","fun","_log","args","ensureFun","v","newFieldFun","newValueFun","oldValueFun","updateBucket","put","deleteKeys","Object","keys","dkey","get","Error","bind","map","newKey","oldValue","delField","reduce","filtered","delete","doReduce","doUpdate"],"mappings":"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","file":"map-reduce.js","sourcesContent":["import './live'\nimport './fields'\n\nimport Gun from 'gun/gun'\n\nGun.chain.mapReduce = function (opts, cb) {\n  mapReduce(this, opts, cb)\n}\n\nexport function mapReduce(bucket, {\n  newField,\n  newValue,\n  value,\n  filter,\n  filters,\n  iterator = 'val',\n  processWhile,\n  updateWhen,\n  logging = false\n}, cb, putCb, opt) {\n\n  let oldProps = {}\n  let newProps = {}\n  let deleteFields = {}\n  let visited = {}\n  let updated = false\n  let allFields = bucket.fields()\n  let processedFields = 0\n\n  function defaultProcessWhile({\n    field,\n    val\n  }) {\n    let reVisit = visited[field]\n    let decision = !reVisit\n    log('processWhile', reVisit, decision)\n    return decision\n  }\n\n  function defaultUpdateWhen({\n    field,\n    val\n  }) {\n    let processedAll = (processedFields >= allFields.length)\n    let visitedAll = allFields.every(f => visited[f])\n    let decision = visitedAll && processedAll\n    log('updateWhen', visitedAll, processedAll, decision)\n    return decision\n  }\n\n  function logger(fun) {\n    return function _log(...args) {\n      if (logging)\n        console.log(fun, ...args)\n    }\n  }\n\n  const log = logger(iterator)\n\n  processWhile = processWhile || defaultProcessWhile\n  updateWhen = updateWhen || defaultUpdateWhen\n\n  function ensureFun(fun) {\n    if (fun && typeof fun !== 'function') {\n      return (v) => fun\n    } else {\n      return fun\n    }\n  }\n\n  let newFieldFun = ensureFun(newField)\n  let newValueFun = ensureFun(newValue)\n  let oldValueFun = ensureFun(value)\n\n  function updateBucket() {\n    log('put', oldProps)\n    bucket.put(oldProps, putCb, opt)\n    log('put', newProps)\n    bucket.put(newProps, putCb, opt)\n\n    let deleteKeys = Object.keys(deleteFields)\n    if (deleteKeys.length > 0) {\n      log('DELETE', deleteKeys)\n      for (let dkey of deleteKeys) {\n        bucket.get(dkey).put(null, putCb, opt)\n      }\n    }\n\n    if (cb) {\n      cb(bucket)\n      log('DONE')\n    } else {\n      throw Error('Missing callback', cb)\n    }\n  }\n\n  log(allFields)\n\n  processWhile = processWhile.bind(this)\n  updateWhen = updateWhen.bind(this)\n\n  bucket.map()[iterator](function (val, field) {\n    log('iterate', {\n      field,\n      val\n    })\n    let newKey = newFieldFun ? newFieldFun(field, val) : field\n    let newValue = newValueFun ? newValueFun(val, field) : val\n    let oldValue = oldValueFun ? oldValueFun(val, field) : val\n    let delField = false\n\n    if (filters) {\n      log('process filters', filters.length)\n      delField = filters.reduce((filtered, filter) => {\n        return !filtered ? filter(field, val) : filtered\n      }, false)\n    }\n\n    if (filter && filter(field, val)) {\n      delField = true\n    }\n\n    log({\n      newKey,\n      newValue,\n      oldValue,\n      delete: delField\n    })\n\n    let doReduce = processWhile({\n      field,\n      val\n    })\n    log('doReduce', doReduce)\n\n    if (doReduce) {\n      log('reduce', {\n        field,\n        val,\n        processedFields\n      })\n      if (delField) {\n        deleteFields[field] = true\n      } else {\n        oldProps[field] = oldValue\n        newProps[newKey] = newValue\n      }\n      visited[field] = true\n      visited[newKey] = true\n      processedFields++\n    }\n    let doUpdate = updateWhen({\n      field,\n      val\n    })\n    log('doUpdate', doUpdate, processedFields)\n    if (doUpdate) {\n      // on stopCondition\n      if (!updated) {\n        log('UPDATE BUCKET')\n        updated = true\n        updateBucket()\n      } else {\n        log('ignore update')\n      }\n    }\n  })\n}"]}